[scripts]
# Install dependencies, configuration, and function code to each build folder
build_packages = "bash -c \"docker run --rm -v ${PWD}:/var/task -it lambci/lambda:build-python3.6 /bin/bash -c './build.sh'\""
# Build the VRT used by API functions
build_vrt_dev = "bash -c \"./scripts/build_vrt/build_vrt.py\""
build_vrt_prod = "bash -c \"./scripts/build_vrt/build_vrt.py -stage prod\""
# Generate micro-datasets used by unit tests and build the accompanying VRT
test_prep = "bash -c \"./scripts/make_test_data/make_test_data.py && ./scripts/build_vrt/build_vrt.py -stage test\" " 
#Run tests
tests = "bash -c \"docker run --rm -v ${PWD}:/var/task -it lambci/lambda:build-python3.6 /bin/bash -c './run-tests.sh'\""
# Package and deploy changes to API
# Requires one argument: 'dev' or 'prod'
deploy = "bash -c \" ./deploy.sh $0 \" "
# Display CloudFormation stack outputs (see template.yaml Outputs section)
outputs = "aws cloudformation describe-stacks --stack-name nfwf-tool-api --query 'Stacks[].Outputs'"

cp_dataset = "bash -c \"aws s3 cp $0 s3://${DATA_BUCKET} \" "

[[source]]
url = "https://pypi.python.org/simple"
verify_ssl = true
name = "pypi"

[packages]
rasterio = { version = "==1.0", extras = ["s3"] }
pyproj = "*"
pyyaml = "*"

[dev-packages]
#click = "*"
#pytest = "*"
fiona = "==1.8.4"
shapely = "==1.6.4"
#requests = "*"

[requires]
python_version = "3.6"
